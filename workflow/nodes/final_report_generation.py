import logging
from typing import Dict
from workflow.state import EvaluationState
from agents.product_manager_agent import ProductManagerAgent  # Corrected import

logger = logging.getLogger(__name__)

class FinalReportGenerationNode:
    def __init__(self, product_manager_agent: ProductManagerAgent):
        self.product_manager_agent = product_manager_agent

    async def __call__(self, state: EvaluationState) -> Dict:
        feasibility_reports = state.get("feasibility_reports", {})
        pain_points = state.get("interaction_result", {}).get("pain_points", [])
        solutions = state.get("solutions", [])  # Corrected to retrieve solutions appropriately
        prioritized_tasks = state.get("prioritized_tasks", [])

        logger.debug("Starting Final Report Generation Node.")

        development_effort = {
            feature: details["development_effort"]
            for feature, details in feasibility_reports.items()
        }

        # Generate the final report using the ProductManagerAgent
        try:
            final_report = await self.product_manager_agent.generate_final_report(
                pain_points=pain_points,
                solutions=solutions,
                development_effort=development_effort,
                prioritized_tasks=prioritized_tasks
            )
            logger.debug("Final report generated by ProductManagerAgent.")
        except Exception as e:
            logger.error("Failed to generate final report: %s", str(e))
            final_report = {
                "pain_points": pain_points,
                "solutions": solutions,
                "development_effort": development_effort,
                "prioritized_tasks": prioritized_tasks
            }

        state["final_report"] = final_report
        logger.debug("Final report stored in state.")
        return state